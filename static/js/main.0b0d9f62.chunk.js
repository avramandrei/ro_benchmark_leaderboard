(this.webpackJsonpro_benchmark_leaderboard=this.webpackJsonpro_benchmark_leaderboard||[]).push([[0],{159:function(e,t,a){},160:function(e,t,a){},17:function(e){e.exports=JSON.parse('{"tasks":[{"area":"NLP","id":"text-classification","task_name":"Text Classification","task_description":"Text classification is the task of assigning a sentence or document an appropriate category. The categories depend on the chosen dataset and can range from topics.","datasets":[]},{"area":"NLP","id":"ner","task_name":"NER","task_description":"Named entity recognition (NER) is the task of tagging entities in text with their corresponding type. Approaches typically use BIO notation, which differentiates the beginning (B) and the inside (I) of entities. O is used for non-entity tokens.","datasets":[]},{"area":"NLP","id":"machine-translation","task_name":"Machine Translation","task_description":"Machine translation is the task of translating a sentence in a source language to a different target language","datasets":[]},{"area":"NLP","id":"tokenization","task_name":"Tokenization","task_description":"Tokenization is the process of breaking a stream of text up into words, phrases, symbols, or other meaningful elements called tokens. The list of tokens becomes input for further processing such as parsing or text mining.","datasets":[{"dataset_id":"ud-romanian-rrt-treebank-tokenization","dataset_name":"UD Romanian RRT Treebank - Tokenization","metric":"F1","model_name":"NLP-Cube v1.1 [end-to-end]","paper_title":"NLP-Cube: End-to-End Raw Text Processing With Neural Networks","paper_link":"http://www.aclweb.org/anthology/K18-2017","source_link":"https://github.com/adobe/NLP-Cube"}]},{"area":"NLP","id":"sentence-segmentation","task_name":"Sentence Segmentation","task_description":"Sentence segmentation is the task of splitting a sentence into its component phrases.","datasets":[{"dataset_id":"ud-romanian-rrt-treebank-sentence-segmentation","dataset_name":"UD Romanian RRT Treebank - Sentence Segmentation","metric":"F1","model_name":"NLP-Cube v1.1 [end-to-end]","paper_title":"NLP-Cube: End-to-End Raw Text Processing With Neural Networks","paper_link":"http://www.aclweb.org/anthology/K18-2017","source_link":"https://github.com/adobe/NLP-Cube"}]},{"area":"NLP","id":"lemmatization","task_name":"Lemmatization","task_description":"Lemmatization is the process of identifying the lemma of a given word or sequence of words.","datasets":[{"dataset_id":"ud-romanian-rrt-treebank-lemmatization","dataset_name":"UD Romanian RRT Treebank - Lemmatization","metric":"F1","model_name":"NLP-Cube v1.1 [end-to-end]","paper_title":"NLP-Cube: End-to-End Raw Text Processing With Neural Networks","paper_link":"http://www.aclweb.org/anthology/K18-2017","source_link":"https://github.com/adobe/NLP-Cube"}]},{"area":"NLP","id":"pos-tagging","task_name":"POS Tagging","task_description":"Part-of-speech tagging (POS tagging) is the task of tagging a word in a text with its part of speech. A part of speech is a category of words with similar grammatical properties.","datasets":[{"dataset_id":"ud-romanian-rrt-treebank-part-of-speech-tagging","dataset_name":"UD Romanian RRT Treebank - Part of Speech Tagging","metric":"F1","model_name":"NLP-Cube v1.1 [end-to-end]","paper_title":"NLP-Cube: End-to-End Raw Text Processing With Neural Networks","paper_link":"http://www.aclweb.org/anthology/K18-2017","source_link":"https://github.com/adobe/NLP-Cube"}]},{"area":"NLP","id":"dependency-parsing","task_name":"Dependency Parsing","task_description":"Dependency parsing is the task of extracting a dependency parse of a sentence that represents its grammatical structure and defines the relationships between \\"head\\" words and words, which modify those heads.","datasets":[{"dataset_id":"ud-romanian-rrt-treebank-dependency-parsing","dataset_name":"UD Romanian RRT Treebank - Dependency Parsing","metric":"UAS","model_name":"NLP-Cube v1.1 [end-to-end]","paper_title":"NLP-Cube: End-to-End Raw Text Processing With Neural Networks","paper_link":"http://www.aclweb.org/anthology/K18-2017","source_link":"https://github.com/adobe/NLP-Cube"}]},{"area":"NLP","id":"language-modeling","task_name":"Language Modeling","task_description":"Language modeling is the task of predicting the next word or character in a document.","datasets":[]}]}')},18:function(e){e.exports=JSON.parse('{"datasets":[{"task":"NER","id":"ronec-romanian-named-entity-corpus-v1","dataset_name":"RONEC - Romanian Named Entity Corpus v1","dataset_description":"Version 1.0 of this free corpus holds 5127 sentences, annotated with 16 classes, with a total of 26376 annotated entities. The corpus comes into two formats: BRAT and CONLLUP, both are text formats for easy access.<br><br>\\nFor evaluation metrics please see <a href=\\"http://www.davidsbatista.net/blog/2018/05/09/Named_Entity_Evaluation/\\">http://www.davidsbatista.net/blog/2018/05/09/Named_Entity_Evaluation/</a>. Please report F1, Precision and Recall.\\n","dataset_link":"https://github.com/dumitrescustefan/ronec","preferred_metric":"F1","license":"MIT","license_url":"","models":[],"metrics":[],"time_range":["Nov \'20","Dec \'20"],"data_points":[]},{"task":"Tokenization","id":"ud-romanian-rrt-treebank-tokenization","dataset_name":"UD Romanian RRT Treebank - Tokenization","dataset_description":"Universal Dependencies (UD) is a framework for consistent annotation of grammar (parts of speech, morphological features, and syntactic dependencies) across different human languages. UD is an open community effort with over 300 contributors producing more than 150 treebanks in 90 languages.<br>\\nHere we are focusing on the Romanian <b>RRT Treebank</b> which contains a train, validation and test file with annotations including tokenization, sentence segmentation, part-of-speech, lemmatization and dependencies parsing. <br>\\nFor more details regarding the CoNLL-U format please see <a href=\\"https://universaldependencies.org/format.html\\">https://universaldependencies.org/format.html</a>.<br>\\nFor evaluation please generate a CoNLL-U format text file and evaluate it with the python script avaliable <a href=\\"http://universaldependencies.org/conll18/evaluation.html\\">here</a>.<br><br>\\n\\nPlease note that the UD Romanian RRT Treebank contains several subtasks in a single file. Here, we are interested only in <b>tokenization</b>. Your submitted system should start with the raw text file and output a CoNLL-U file. Please report only the <b>Word Segmentation</b> F1, Precision and Recall scores.","dataset_link":"https://universaldependencies.org/","preferred_metric":"F1","license":"CC BY-SA 4.0","license_url":"https://creativecommons.org/licenses/by-sa/4.0/","models":[{"model":"NLP-Cube v1.0 [end-to-end]","extra_training_data":true,"paper_title":"NLP-Cube: End-to-End Raw Text Processing With Neural Networks","paper_link":"http://www.aclweb.org/anthology/K18-2017","source_link":"https://github.com/adobe/NLP-Cube","submission_date":"2018-10","model_size":"","results":{"F1":99.74}},{"model":"NLP-Cube v1.1 [end-to-end]","extra_training_data":true,"paper_title":"NLP-Cube: End-to-End Raw Text Processing With Neural Networks","paper_link":"http://www.aclweb.org/anthology/K18-2017","source_link":"https://github.com/adobe/NLP-Cube","submission_date":"2019-04","model_size":"","results":{"F1":99.71}}],"metrics":["F1"],"time_range":["Sep \'18","Oct \'18","Apr \'19","May \'19"],"data_points":[{"model":"NLP-Cube v1.0 [end-to-end]","submission_date":"Oct \'18","F1":99.74},{"model":"NLP-Cube v1.1 [end-to-end]","submission_date":"Apr \'19","F1":99.71}]},{"task":"Sentence Segmentation","id":"ud-romanian-rrt-treebank-sentence-segmentation","dataset_name":"UD Romanian RRT Treebank - Sentence Segmentation","dataset_description":"Universal Dependencies (UD) is a framework for consistent annotation of grammar (parts of speech, morphological features, and syntactic dependencies) across different human languages. UD is an open community effort with over 300 contributors producing more than 150 treebanks in 90 languages.<br>\\nHere we are focusing on the Romanian <b>RRT Treebank</b> which contains a train, validation and test file with annotations including tokenization, sentence segmentation, part-of-speech, lemmatization and dependencies parsing. <br>\\nFor more details regarding the CoNLL-U format please see <a href=\\"https://universaldependencies.org/format.html\\">https://universaldependencies.org/format.html</a>.<br>\\nFor evaluation please generate a CoNLL-U format text file and evaluate it with the python script avaliable <a href=\\"http://universaldependencies.org/conll18/evaluation.html\\">here</a>.<br><br>\\n\\nPlease note that the UD Romanian RRT Treebank contains several subtasks in a single file. Here, we are interested only in <b>sentence segmentation</b>.  Your submitted system should start with the raw text file and output a CoNLL-U file. Please report only the <b>sentence segmentation</b> F1, Precision and Recall scores.","dataset_link":"https://universaldependencies.org/","preferred_metric":"F1","license":"CC BY-SA 4.1","license_url":"https://creativecommons.org/licenses/by-sa/4.0/","models":[{"model":"NLP-Cube v1.0 [end-to-end]","extra_training_data":true,"paper_title":"NLP-Cube: End-to-End Raw Text Processing With Neural Networks","paper_link":"http://www.aclweb.org/anthology/K18-2017","source_link":"https://github.com/adobe/NLP-Cube","submission_date":"2018-10","model_size":"","results":{"F1":95.56}},{"model":"NLP-Cube v1.1 [end-to-end]","extra_training_data":true,"paper_title":"NLP-Cube: End-to-End Raw Text Processing With Neural Networks","paper_link":"http://www.aclweb.org/anthology/K18-2017","source_link":"https://github.com/adobe/NLP-Cube","submission_date":"2019-04","model_size":"","results":{"F1":95.42}}],"metrics":["F1"],"time_range":["Sep \'18","Oct \'18","Apr \'19","May \'19"],"data_points":[{"model":"NLP-Cube v1.0 [end-to-end]","submission_date":"Oct \'18","F1":95.56},{"model":"NLP-Cube v1.1 [end-to-end]","submission_date":"Apr \'19","F1":95.42}]},{"task":"Lemmatization","id":"ud-romanian-rrt-treebank-lemmatization","dataset_name":"UD Romanian RRT Treebank - Lemmatization","dataset_description":"Universal Dependencies (UD) is a framework for consistent annotation of grammar (parts of speech, morphological features, and syntactic dependencies) across different human languages. UD is an open community effort with over 300 contributors producing more than 150 treebanks in 90 languages.<br>\\nHere we are focusing on the Romanian <b>RRT Treebank</b> which contains a train, validation and test file with annotations including tokenization, sentence segmentation, part-of-speech, lemmatization and dependencies parsing. <br>\\nFor more details regarding the CoNLL-U format please see <a href=\\"https://universaldependencies.org/format.html\\">https://universaldependencies.org/format.html</a>.<br>\\nFor evaluation please generate a CoNLL-U format text file and evaluate it with the python script avaliable <a href=\\"http://universaldependencies.org/conll18/evaluation.html\\">here</a>.<br><br>\\n\\nPlease note that the UD Romanian RRT Treebank contains several subtasks in a single file. Here, we are interested only in <b>lemmatization</b>. Your submitted system should start with the CoNLL-U test file to ensure gold word tokenization and sentence segmentation and output a CoNLL-U file, with the lemma column filled in. All other fields can be left empty (marked with the \'_\' underline). If your system performs end-to-end processing (i.e. starts from raw text, segments sentences, tokenizes, etc, up to the current task, please mark it as such by appending to its name <b>[end-to-end]</b>).\\n\\nPlease report only F1, Precision and Recall scores.","dataset_link":"https://universaldependencies.org/","preferred_metric":"F1","license":"CC BY-SA 4.2","license_url":"https://creativecommons.org/licenses/by-sa/4.0/","models":[{"model":"NLP-Cube v1.0 [end-to-end]","extra_training_data":true,"paper_title":"NLP-Cube: End-to-End Raw Text Processing With Neural Networks","paper_link":"http://www.aclweb.org/anthology/K18-2017","source_link":"https://github.com/adobe/NLP-Cube","submission_date":"2018-10","model_size":"","results":{"F1":96.91}},{"model":"NLP-Cube v1.1 [end-to-end]","extra_training_data":true,"paper_title":"NLP-Cube: End-to-End Raw Text Processing With Neural Networks","paper_link":"http://www.aclweb.org/anthology/K18-2017","source_link":"https://github.com/adobe/NLP-Cube","submission_date":"2019-04","model_size":"","results":{"F1":96.57}}],"metrics":["F1"],"time_range":["Sep \'18","Oct \'18","Apr \'19","May \'19"],"data_points":[{"model":"NLP-Cube v1.0 [end-to-end]","submission_date":"Oct \'18","F1":96.91},{"model":"NLP-Cube v1.1 [end-to-end]","submission_date":"Apr \'19","F1":96.57}]},{"task":"POS Tagging","id":"ud-romanian-rrt-treebank-part-of-speech-tagging","dataset_name":"UD Romanian RRT Treebank - Part of Speech Tagging","dataset_description":"Universal Dependencies (UD) is a framework for consistent annotation of grammar (parts of speech, morphological features, and syntactic dependencies) across different human languages. UD is an open community effort with over 300 contributors producing more than 150 treebanks in 90 languages.<br>\\nHere we are focusing on the Romanian <b>RRT Treebank</b> which contains a train, validation and test file with annotations including tokenization, sentence segmentation, part-of-speech, lemmatization and dependencies parsing. <br>\\nFor more details regarding the CoNLL-U format please see <a href=\\"https://universaldependencies.org/format.html\\">https://universaldependencies.org/format.html</a>.<br>\\nFor evaluation please generate a CoNLL-U format text file and evaluate it with the python script avaliable <a href=\\"http://universaldependencies.org/conll18/evaluation.html\\">here</a>.<br><br>\\n\\nPlease note that the UD Romanian RRT Treebank contains several subtasks in a single file. Here, we are interested only in <b>part-of-speech tagging</b>. Your submitted system should start with the CoNLL-U test file to ensure gold word tokenization and sentence segmentation and output a CoNLL-U file, with the UPOS column filled in. All other fields can be left empty (marked with the \'_\' underline). If your system performs end-to-end processing (i.e. starts from raw text, segments sentences, tokenizes, etc, up to the current task, please mark it as such by appending to its name <b>[end-to-end]</b>).\\n\\nPlease report only F1, Precision and Recall scores.","dataset_link":"https://universaldependencies.org/","preferred_metric":"F1","license":"CC BY-SA 4.3","license_url":"https://creativecommons.org/licenses/by-sa/4.0/","models":[{"model":"NLP-Cube v1.0 [end-to-end]","extra_training_data":true,"paper_title":"NLP-Cube: End-to-End Raw Text Processing With Neural Networks","paper_link":"http://www.aclweb.org/anthology/K18-2017","source_link":"https://github.com/adobe/NLP-Cube","submission_date":"2018-10","model_size":"","results":{"F1":97.42}},{"model":"NLP-Cube v1.1 [end-to-end]","extra_training_data":true,"paper_title":"NLP-Cube: End-to-End Raw Text Processing With Neural Networks","paper_link":"http://www.aclweb.org/anthology/K18-2017","source_link":"https://github.com/adobe/NLP-Cube","submission_date":"2019-04","model_size":"","results":{"F1":96.96}},{"model":"Romanian BERT Baseline (bert-base-romanian-uncased-v1)","extra_training_data":true,"paper_title":"","paper_link":"","source_link":"https://github.com/dumitrescustefan/Romanian-Transformers","submission_date":"2020-05","model_size":"","results":{"F1":98.18}}],"metrics":["F1"],"time_range":["Sep \'18","Oct \'18","Apr \'19","May \'20","Jun \'20"],"data_points":[{"model":"NLP-Cube v1.0 [end-to-end]","submission_date":"Oct \'18","F1":97.42},{"model":"NLP-Cube v1.1 [end-to-end]","submission_date":"Apr \'19","F1":96.96},{"model":"Romanian BERT Baseline (bert-base-romanian-uncased-v1)","submission_date":"May \'20","F1":98.18}]},{"task":"Dependency Parsing","id":"ud-romanian-rrt-treebank-dependency-parsing","dataset_name":"UD Romanian RRT Treebank - Dependency Parsing","dataset_description":"Universal Dependencies (UD) is a framework for consistent annotation of grammar (parts of speech, morphological features, and syntactic dependencies) across different human languages. UD is an open community effort with over 300 contributors producing more than 150 treebanks in 90 languages.<br>\\nHere we are focusing on the Romanian <b>RRT Treebank</b> which contains a train, validation and test file with annotations including tokenization, sentence segmentation, part-of-speech, lemmatization and dependencies parsing. <br>\\nFor more details regarding the CoNLL-U format please see <a href=\\"https://universaldependencies.org/format.html\\">https://universaldependencies.org/format.html</a>.<br>\\nFor evaluation please generate a CoNLL-U format text file and evaluate it with the python script avaliable <a href=\\"http://universaldependencies.org/conll18/evaluation.html\\">here</a>.<br><br>\\n\\nPlease note that the UD Romanian RRT Treebank contains several subtasks in a single file. Here, we are interested only in <b>dependency parsing</b>. Your submitted system should start with the CoNLL-U test file to ensure gold word tokenization and sentence segmentation and output a CoNLL-U file, with the appropriate columns filled in (head and deps). All other fields can be left empty (marked with the \'_\' underline). If your system performs end-to-end processing (i.e. starts from raw text, segments sentences, tokenizes, etc, up to the current task, please mark it as such by appending to its name <b>[end-to-end]</b>).\\n\\nPlease report only F1, Precision and Recall scores.","dataset_link":"https://universaldependencies.org/","preferred_metric":"UAS","license":"CC BY-SA 4.4","license_url":"https://creativecommons.org/licenses/by-sa/4.0/","models":[{"model":"NLP-Cube v1.0 [end-to-end]","extra_training_data":true,"paper_title":"NLP-Cube: End-to-End Raw Text Processing With Neural Networks","paper_link":"http://www.aclweb.org/anthology/K18-2017","source_link":"https://github.com/adobe/NLP-Cube","submission_date":"2018-10","model_size":"","results":{"UAS":90.38,"LAS":85.23}},{"model":"NLP-Cube v1.1 [end-to-end]","extra_training_data":true,"paper_title":"NLP-Cube: End-to-End Raw Text Processing With Neural Networks","paper_link":"http://www.aclweb.org/anthology/K18-2017","source_link":"https://github.com/adobe/NLP-Cube","submission_date":"2019-04","model_size":"","results":{"UAS":90.14,"LAS":85.06}}],"metrics":["UAS","LAS"],"time_range":["Sep \'18","Oct \'18","Apr \'19","May \'19"],"data_points":[{"model":"NLP-Cube v1.0 [end-to-end]","submission_date":"Oct \'18","UAS":90.38,"LAS":85.23},{"model":"NLP-Cube v1.1 [end-to-end]","submission_date":"Apr \'19","UAS":90.14,"LAS":85.06}]}]}')},185:function(e,t){},203:function(e,t,a){},205:function(e,t,a){},206:function(e,t,a){},207:function(e,t,a){},212:function(e,t,a){},213:function(e,t,a){},217:function(e,t,a){},218:function(e,t,a){},219:function(e,t,a){"use strict";a.r(t);var n=a(0),s=a(1),i=a.n(s),r=a(29),o=a.n(r),c=a(48),d=a(6),l=a(75),u=a.n(l),h=a(7),m=a(9),b=a(11),p=a(10),j=a(76),g=a(77),f=(a(159),function(){function e(){Object(h.a)(this,e)}return Object(m.a)(e,[{key:"normalizeUrl",value:function(e){return e.toLowerCase()}},{key:"getCanonicalUrl",value:function(t){return this.normalizeUrl(t).replace(e.basePath,"")}},{key:"isHomeUrl",value:function(e){var t=this.getCanonicalUrl(e);return""===t||"/"===t}},{key:"buildTaskUrl",value:function(t){var a=t.id,n="".concat(e.basePath,"/task/").concat(a);return this.normalizeUrl(n)}},{key:"isTaskUrl",value:function(e){return this.getCanonicalUrl(e).startsWith("/task")}},{key:"getTaskId",value:function(e){return this.getCanonicalUrl(e).replace("/task/","")}},{key:"buildDatasetUrl",value:function(t){var a=t.id,n="".concat(e.basePath,"/dataset/").concat(a);return this.normalizeUrl(n)}},{key:"isDatasetUrl",value:function(e){return this.getCanonicalUrl(e).startsWith("/dataset")}},{key:"getDatasetId",value:function(e){return this.getCanonicalUrl(e).replace("/dataset/","")}}],[{key:"basePath",get:function(){return"/ro_benchmark_leaderboard"}},{key:"taskUrlTemplate",get:function(){return"/task/:id"}},{key:"datasetUrlTemplate",get:function(){return"/dataset/:id"}},{key:"aboutPageUrl",get:function(){return"".concat(e.basePath,"/about")}},{key:"termsPageUrl",get:function(){return"".concat(e.basePath,"/terms")}},{key:"submitPageUrl",get:function(){return"".concat(e.basePath,"/submit")}}]),e}()),x=function(e){Object(b.a)(a,e);var t=Object(p.a)(a);function a(e){var n;return Object(h.a)(this,a),(n=t.call(this,e)).urlBuilder=new f,n.state={activeArea:null},n}return Object(m.a)(a,[{key:"updateactiveArea",value:function(e){var t=this.state.activeArea;this.setState({activeArea:e!==t?e:null})}},{key:"renderDataset",value:function(e){return Object(n.jsxs)("tr",{children:[Object(n.jsx)("td",{children:e.dataset}),Object(n.jsx)("td",{children:e.submission_count})]},e.dataset)}},{key:"renderTaskSubmissions",value:function(e){if(!e.summary)return Object(n.jsx)("span",{children:"No submissions"});var t=e.summary;return Object(n.jsx)("table",{children:Object(n.jsxs)("tbody",{children:[Object(n.jsxs)("tr",{children:[Object(n.jsx)("td",{children:t.dataset_count}),Object(n.jsx)("td",{children:1===t.dataset_count?"dataset":"datasets"})]}),Object(n.jsxs)("tr",{children:[Object(n.jsx)("td",{children:t.submission_count}),Object(n.jsx)("td",{children:1===t.submission_count?"submission":"submissions"})]})]})})}},{key:"renderAreaTask",value:function(e){return Object(n.jsx)("a",{href:this.urlBuilder.buildTaskUrl(e),className:"task-tile-link",children:Object(n.jsxs)("div",{className:"task-tile",children:[Object(n.jsx)("h5",{children:e.name}),Object(n.jsx)("div",{className:"task-data",children:this.renderTaskSubmissions(e)})]},e.name)})}},{key:"renderArea",value:function(e){var t=this,a=this.state.activeArea,s=e.tasks,i=e.name,r=a===i;return Object(n.jsxs)("div",{className:"tile-wrapper",children:[Object(n.jsx)("div",{onClick:function(){return t.updateactiveArea(i)},className:"collapse-trigger",children:Object(n.jsx)("h4",{children:e.name})}),Object(n.jsx)(j.Collapse,{isOpened:r,children:Object(n.jsxs)("div",{className:"task-wrapper",children:[s.map((function(e){return t.renderAreaTask(e)})),Object(n.jsx)("div",{className:"clear"})]})})]},e.name)}},{key:"render",value:function(){var e=this,t=g.areas;if(!this.state.activeArea){var a=t[0];this.setState({activeArea:a.name})}return Object(n.jsxs)(n.Fragment,{children:[Object(n.jsxs)("div",{className:"intro",children:[Object(n.jsxs)("p",{children:["LiRo (",Object(n.jsx)("em",{children:"Li"}),"mba ",Object(n.jsx)("em",{children:"Ro"}),"m\xe2n\u0103) provides a benchmark for Romanian language tasks."]}),Object(n.jsx)("p",{children:"The project keeps track of performance of different published models on the datasets and tasks listed below. This allows easy comparison of different models and monitoring progress on these tasks and datasets over time."})]}),t.map((function(t){return e.renderArea(t)}))]})}}]),a}(i.a.Component),O=a(17),k=function(){return Object(n.jsx)("svg",{viewBox:"0 0 16 16",width:"16",height:"16",children:Object(n.jsx)("path",{fillRule:"evenodd",d:"M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z"})})},v=function(){return Object(n.jsx)("svg",{viewBox:"0 0 512 512",width:"16",height:"16",children:Object(n.jsx)("path",{fillRule:"evenodd",fill:"#fff",d:"M256 32C132.3 32 32 134.9 32 261.7c0 101.5 64.2 187.5 153.2 217.9a17.56 17.56 0 003.8.4c8.3 0 11.5-6.1 11.5-11.4 0-5.5-.2-19.9-.3-39.1a102.4 102.4 0 01-22.6 2.7c-43.1 0-52.9-33.5-52.9-33.5-10.2-26.5-24.9-33.6-24.9-33.6-19.5-13.7-.1-14.1 1.4-14.1h.1c22.5 2 34.3 23.8 34.3 23.8 11.2 19.6 26.2 25.1 39.6 25.1a63 63 0 0025.6-6c2-14.8 7.8-24.9 14.2-30.7-49.7-5.8-102-25.5-102-113.5 0-25.1 8.7-45.6 23-61.6-2.3-5.8-10-29.2 2.2-60.8a18.64 18.64 0 015-.5c8.1 0 26.4 3.1 56.6 24.1a208.21 208.21 0 01112.2 0c30.2-21 48.5-24.1 56.6-24.1a18.64 18.64 0 015 .5c12.2 31.6 4.5 55 2.2 60.8 14.3 16.1 23 36.6 23 61.6 0 88.2-52.4 107.6-102.3 113.3 8 7.1 15.2 21.1 15.2 42.5 0 30.7-.3 55.5-.3 63 0 5.4 3.1 11.5 11.4 11.5a19.35 19.35 0 004-.4C415.9 449.2 480 363.1 480 261.7 480 134.9 379.7 32 256 32z"})})},_=function(){return Object(n.jsx)("svg",{viewBox:"0 0 512 512",width:"16",height:"16",children:Object(n.jsx)("path",{d:"M416 128L192 384l-96-96"})})},w=function(){return Object(n.jsx)("svg",{viewBox:"0 0 512 512",width:"16",height:"16",children:Object(n.jsx)("path",{d:"M289.94 256l95-95A24 24 0 00351 127l-95 95-95-95a24 24 0 00-34 34l95 95-95 95a24 24 0 1034 34l95-95 95 95a24 24 0 0034-34z"})})},y=(a(160),function(e){Object(b.a)(a,e);var t=Object(p.a)(a);function a(e){var n;return Object(h.a)(this,a),(n=t.call(this,e)).taskId=e.match.params.id,n.task=O.tasks.find((function(e){return e.id===n.taskId})),n.urlBuilder=new f,n}return Object(m.a)(a,[{key:"renderPaper",value:function(e,t){return e?Object(n.jsx)("a",{href:e,target:"_blank",rel:"noopener noreferrer",children:t}):{paper_title:t}}},{key:"renderModelRow",value:function(e){var t=e.dataset_name,a=e.dataset_id,s=e.model_name,i=e.paper_title,r=e.paper_link,o=e.source_link;return Object(n.jsxs)("tr",{children:[Object(n.jsxs)("td",{children:[" ",Object(n.jsx)("a",{href:this.urlBuilder.buildDatasetUrl({id:a}),children:t})]}),Object(n.jsxs)("td",{children:[" ",Object(n.jsx)("a",{href:this.urlBuilder.buildDatasetUrl({id:a}),children:s})]}),Object(n.jsx)("td",{children:this.renderPaper(r,i)}),Object(n.jsx)("td",{children:o&&Object(n.jsx)("a",{href:o,target:"_blank",rel:"noopener noreferrer",children:Object(n.jsx)(v,{})})})]},s)}},{key:"renderTaskDatasets",value:function(e){var t=this;return e&&0!==e.length?Object(n.jsxs)("table",{className:"table",children:[Object(n.jsx)("thead",{children:Object(n.jsxs)("tr",{children:[Object(n.jsx)("td",{children:"Dataset"}),Object(n.jsx)("td",{children:"Best model"}),Object(n.jsx)("td",{children:"Paper"}),Object(n.jsx)("td",{children:"Code"})]})}),Object(n.jsx)("tbody",{children:e.map((function(e){return t.renderModelRow(e)}))})]}):Object(n.jsx)("p",{children:"There are no submissions for this task."})}},{key:"render",value:function(){var e=this.task.datasets;return Object(n.jsxs)("div",{className:"task-details",children:[Object(n.jsx)("h3",{children:this.task.task_name}),Object(n.jsx)("p",{className:"task-description",children:this.task.task_description}),Object(n.jsx)("h4",{children:" Benchmarks"}),this.renderTaskDatasets(e)]})}}]),a}(i.a.Component)),N=a(78),P=a.n(N),R=(a(203),a(16)),L=a(20),C=function(e){Object(b.a)(a,e);var t=Object(p.a)(a);function a(e){var n;return Object(h.a)(this,a),(n=t.call(this,e)).svgRef=i.a.createRef(),n}return Object(m.a)(a,[{key:"componentDidMount",value:function(){var e=this.props,t=e.timeRange,a=e.dataPoints,n=e.width,s=e.height;this.drawScatterPlot(t,a,n,s)}},{key:"componentDidUpdate",value:function(){var e=this.props,t=e.timeRange,a=e.dataPoints,n=e.width,s=e.height;this.drawScatterPlot(t,a,n,s)}},{key:"drawScatterPlot",value:function(e,t,a,n){var s=Object(L.f)(this.svgRef.current).attr("width",a).attr("height",n);s.selectAll("*").remove();var i=function(e){return e.score},r=60,o=150,c=a-o-40,d=n-r-88,l=Object(L.e)().domain(e).range([0,c]),u=Object(L.d)().domain(Object(L.c)(t,i)).range([d,0]).nice(),h=s.append("g").attr("transform","translate(".concat(o,",").concat(r,")")),m=Object(L.a)(l).tickSize(-d).tickPadding(15),b=Object(L.b)(u).tickSize(-c).tickPadding(10),p=h.append("g").call(b);p.selectAll(".domain").remove(),p.append("text").attr("class","axis-label").attr("y",-55).attr("x",-d/2).attr("fill","black").attr("transform","rotate(-90)").attr("text-anchor","middle").text("Score");var j=h.append("g").call(m).attr("transform","translate(0,".concat(d,")"));j.select(".domain").remove(),j.append("text").attr("class","axis-label").attr("y",50).attr("x",c/2).attr("fill","black").text("Submission date");var g=Object(L.f)(".canvas").append("div").style("opacity",0).attr("class","tooltip").style("background-color","white").style("border","solid").style("border-width","1px").style("border-radius","5px").style("padding","10px");h.selectAll("circle").data(t).enter().append("circle").attr("cy",(function(e){return u(i(e))})).attr("cx",(function(e){return l(function(e){return e.submissionDate}(e))})).attr("r",5).on("mouseover",(function(e,t){return g.style("opacity",1).html("<b>".concat(t.model,"</b>: ").concat(i(t)))})).on("mousemove",(function(e){var t=e.clientX+10,a=e.clientY;return g.style("left","".concat(t,"px")).style("top","".concat(a,"px"))})).on("mouseleave",(function(){return g.transition().duration(200).style("opacity",0)})),h.append("text").attr("class","title").attr("x",c/2).attr("y",-30).attr("text-anchor","middle").text("Task leaderboard")}},{key:"render",value:function(){return Object(n.jsx)(n.Fragment,{children:Object(n.jsx)("svg",{ref:this.svgRef})})}}]),a}(s.Component),T=function(e){Object(b.a)(a,e);var t=Object(p.a)(a);function a(e){var n;return Object(h.a)(this,a),(n=t.call(this,e)).buildDataPoints=function(e){return n.dataset.data_points.map((function(t){return{model:t.model,submissionDate:t.submission_date,score:t[e]}}))},n.dataset=e.dataset,n.handleSelectedMetricChange=n.handleSelectedMetricChange.bind(Object(R.a)(n)),n.canvas=i.a.createRef(),n.onWindowResize=n.onWindowResize.bind(Object(R.a)(n)),n.state={timeRange:n.dataset.time_range,dataPoints:n.buildDataPoints(n.dataset.preferred_metric),width:void 0,height:void 0},n}return Object(m.a)(a,[{key:"componentDidMount",value:function(){window.addEventListener("resize",this.onWindowResize),this.onWindowResize()}},{key:"componentWillUnmount",value:function(){window.removeEventListener("resize",this.onWindowResize)}},{key:"onWindowResize",value:function(){var e=this.canvas.current.getBoundingClientRect();this.setState({width:e.width,height:e.height})}},{key:"handleSelectedMetricChange",value:function(e){var t=e.target.value;t&&this.setState({dataPoints:this.buildDataPoints(t)})}},{key:"render",value:function(){return Object(n.jsxs)(n.Fragment,{children:[Object(n.jsx)("div",{ref:this.canvas,className:"canvas",children:Object(n.jsx)(C,{timeRange:this.state.timeRange,dataPoints:this.state.dataPoints,width:this.state.width,height:this.state.height})}),Object(n.jsxs)("div",{id:"select-metric-group",className:"input-group input-group-sm",children:[Object(n.jsx)("div",{className:"input-group-prepend",children:Object(n.jsx)("label",{className:"input-group-text",htmlFor:"metrics",children:"View scores for:"})}),Object(n.jsx)("select",{className:"custom-select",name:"metrics",defaultValue:this.dataset.preferred_metric,onChange:this.handleSelectedMetricChange,children:this.dataset.metrics.map((function(e){return Object(n.jsx)("option",{value:e,children:e},e)}))})]})]})}}]),a}(s.Component),U=a(81),S=a(41),D=(a(205),function(e){Object(b.a)(a,e);var t=Object(p.a)(a);function a(e){var n;return Object(h.a)(this,a),(n=t.call(this,e)).models=e.models,n.metrics=e.metrics,n.state={sortDirection:"default",sortBy:"default"},n.onSort=n.onSort.bind(Object(R.a)(n)),n.sortFunction=n.sortFunction.bind(Object(R.a)(n)),n}return Object(m.a)(a,[{key:"onSort",value:function(e){var t,a=this.state.sortDirection;"default"===a&&(t="descending"),"descending"===a&&(t="ascending"),"ascending"===a&&(t="default"),this.setState({sortDirection:t,sortBy:e})}},{key:"sortFunction",value:function(e,t){var a=this.state,n=a.sortDirection,s=a.sortBy,i=e.results[s],r=t.results[s];return"ascending"===n?i-r:"descending"===n?r-i:0}},{key:"renderModel",value:function(e,t){return Object(n.jsxs)("tr",{children:[Object(n.jsx)("td",{children:t}),Object(n.jsx)("td",{children:e.model}),this.metrics.map((function(t){return Object(n.jsx)("td",{children:e.results[t]})})),Object(n.jsx)("td",{className:"td-extra-training-data",children:e.extra_training_data?Object(n.jsx)(_,{}):Object(n.jsx)(w,{})}),Object(n.jsx)("td",{children:e.model_size}),Object(n.jsx)("td",{children:Object(n.jsx)("a",{href:e.paper_link,target:"_blank",rel:"noopener noreferrer",children:e.paper_title})}),Object(n.jsx)("td",{children:e.source_link&&Object(n.jsx)("a",{href:e.source_link,target:"_blank",rel:"noopener noreferrer",children:Object(n.jsx)(v,{})})}),Object(n.jsx)("td",{children:e.submission_date})]})}},{key:"renderSortButton",value:function(){var e=this.state.sortDirection;return"ascending"===e?Object(n.jsx)(S.c,{}):"descending"===e?Object(n.jsx)(S.b,{}):Object(n.jsx)(S.a,{})}},{key:"render",value:function(){var e=this;return Object(n.jsxs)("table",{className:"table dataset-details",children:[Object(n.jsx)("thead",{children:Object(n.jsxs)("tr",{children:[Object(n.jsx)("td",{children:"Rank"}),Object(n.jsx)("td",{children:"Model"}),this.metrics.map((function(t){return Object(n.jsxs)("td",{children:[t,Object(n.jsx)("button",{type:"button",onClick:function(){return e.onSort(t)},children:e.renderSortButton()})]})})),Object(n.jsx)("td",{children:"Extra training data"}),Object(n.jsx)("td",{children:"Model size"}),Object(n.jsx)("td",{children:"Paper"}),Object(n.jsx)("td",{children:"Code"}),Object(n.jsx)("td",{children:"Submitted"})]})}),Object(n.jsx)("tbody",{children:Object(U.a)(this.models).sort(this.sortFunction).map((function(t,a){return e.renderModel(t,a)}))})]})}}]),a}(i.a.Component)),E=a(18),z=function(e){Object(b.a)(a,e);var t=Object(p.a)(a);function a(e){var n;return Object(h.a)(this,a),(n=t.call(this,e)).datasetId=e.match.params.id,n.dataset=E.datasets.find((function(e){return e.id===n.datasetId})),n.urlBuilder=new f,n}return Object(m.a)(a,[{key:"render",value:function(){return Object(n.jsxs)(n.Fragment,{children:[Object(n.jsx)("h3",{className:"dataset-title",children:this.dataset.dataset_name}),Object(n.jsx)("div",{className:"dataset-description",children:P()(this.dataset.dataset_description)}),Object(n.jsx)("table",{className:"dataset-info",children:Object(n.jsxs)("tbody",{children:[Object(n.jsxs)("tr",{children:[Object(n.jsx)("th",{children:"Source"}),Object(n.jsx)("td",{children:Object(n.jsx)("a",{href:this.dataset.dataset_link,target:"_blank",rel:"noopener noreferrer",children:this.dataset.dataset_link})})]}),Object(n.jsxs)("tr",{children:[Object(n.jsx)("th",{children:"License"}),Object(n.jsx)("td",{children:this.dataset.license_url?Object(n.jsx)("a",{href:this.dataset.license_url,target:"_blank",rel:"noopener noreferrer",children:this.dataset.license}):this.dataset.license})]})]})}),Object(n.jsx)("div",{className:"add-model-link",children:Object(n.jsx)("a",{href:f.submitPageUrl,children:"Add model"})}),Object(n.jsx)(T,{dataset:this.dataset}),Object(n.jsx)(D,{models:this.dataset.models,metrics:this.dataset.metrics})]})}}]),a}(i.a.Component),A=(a(206),function(){return Object(n.jsxs)(n.Fragment,{children:[Object(n.jsx)("h1",{children:"Who are we?"}),Object(n.jsx)("p",{children:"We are a group of Romanians with expertise in Machine Learning, NLP, linguistics, and data privacy. Our goal is to accelerate progress in AI research on Romanian language tasks."}),Object(n.jsxs)("h1",{children:["What is the LiRo (",Object(n.jsx)("em",{children:"Limba Rom\xe2n\u0103"}),") project?"]}),Object(n.jsx)("h2",{children:"Benchmark"}),Object(n.jsxs)("p",{children:["LiRo provides a benchmark for Romanian language tasks. It contains ",O.tasks.length," tasks on"," ",E.datasets.length," datasets: ",O.tasks.length," existing in the literature, ",0," newly created through our team\u2019s efforts."]}),Object(n.jsx)("h2",{children:"Leaderboard"}),Object(n.jsx)("p",{children:"LiRo keeps track of performance of different published models on the datasets and tasks listed above. This allows easy comparison of different models and monitoring progress on these tasks and datasets over time."}),Object(n.jsx)("h2",{children:"Starter code"}),Object(n.jsx)("p",{children:"Contains scripts for downloading the datasets and computing various metrics for the tasks listed above. As this project is ongoing, we will add as soon as possible starter code for tasks that do not yet have it."}),Object(n.jsx)("h1",{children:"How can you contribute?"}),Object(n.jsxs)("p",{children:["To add your model to the leaderboard, use the starter code to evaluate your model\u2019s performance and"," ",Object(n.jsx)("a",{href:f.submitPageUrl,children:"submit"})," your results, together with the paper and/or GitHub repo."]}),Object(n.jsx)("p",{children:"If you have a relevant dataset that is not included, please contact us to see how we can add it to the leaderboard. The more the better."}),Object(n.jsx)("h1",{children:"Team"}),Object(n.jsxs)("ul",{children:[Object(n.jsx)("li",{children:"Adriana Stan, Associate Professor (Technical University of Cluj-Napoca)"}),Object(n.jsx)("li",{children:"Be\xe1ta L\u0151rincz, PhD student (\u201dBabe\u0219-Bolyai\u201d University, Technical University of Cluj-Napoca)"}),Object(n.jsx)("li",{children:"Cristina Victoria Iacobescu, Attorney-at-law, Reff & Associates (member of Deloitte Legal)"}),Object(n.jsx)("li",{children:"George-Andrei Dima, MSc student (Politehnica University of Bucharest)"}),Object(n.jsx)("li",{children:"Lorena Ro\u0219ia, Attorney-at-law, Reff & Associates (member of Deloitte Legal)"}),Object(n.jsx)("li",{children:"Luciana Morogan, Associate Professor (Military Technical Academy Ferdinand Bucharest)"}),Object(n.jsx)("li",{children:"Madalina Chitez, Researcher (West University of Timisoara, CODHUS Research Centre)"}),Object(n.jsx)("li",{children:"Petru Rebeja, PhD student (Alexandru Ioan Cuza University of Ia\u0219i, AIRomania)"}),Object(n.jsx)("li",{children:"Radu Tudor Ionescu (University of Bucharest)"}),Object(n.jsx)("li",{children:"Razvan Pascanu, Research Scientist (DeepMind, EEML, AIRomania)"}),Object(n.jsx)("li",{children:"\u0218tefan Daniel Dumitrescu, NLP Independent Researcher"}),Object(n.jsx)("li",{children:"Traian Rebedea, Associate Professor (Politehnica University of Bucharest)"}),Object(n.jsx)("li",{children:"Viorica Patraucean, Research Scientist (DeepMind, EEML, AIRomania)"})]})]})}),F=function(){return Object(n.jsxs)(n.Fragment,{children:[Object(n.jsx)("h1",{id:"terms",children:"Terms and Conditions"}),Object(n.jsx)("h1",{id:"privacy",children:"Privacy notice"})]})},B=(a(207),a(79)),M=function(){return Object(n.jsxs)(n.Fragment,{children:[Object(n.jsx)("h1",{id:"guide-on-how-to-submit-a-new-model",children:"Guide on how to submit a new model"}),Object(n.jsxs)("p",{children:["Submitting a new model to the leaderboard is easy! Simply"," ",Object(n.jsx)("a",{href:"https://github.com/eemlcommunity/ro_benchmark_leaderboard/issues/new/choose",children:"create a new issue"})," and click on the ",Object(n.jsx)("code",{children:"Get started"})," button to the right of the ",Object(n.jsx)("code",{children:"Submit new model"})," template. Please fill in with all the info requested in the template, as well as all extra info you wish to let us know about your model. We\u2019ll review your submission and add it to the leaderboard, that\u2019s it!"]}),Object(n.jsx)("p",{children:"Here\u2019s a step-by-step guide on how to add a new model. Let\u2019s assume you have a new Named Entity Recognition (NER) model that you wish to submit; after starting a new model issue template, you\u2019ll have to fill in a number of fields:"}),Object(n.jsxs)("ul",{children:[Object(n.jsx)("li",{children:Object(n.jsxs)("p",{children:[Object(n.jsx)("code",{children:"Model name"})," Please write here your model name. If you didn\u2019t name your model, you\u2019d help the community a lot by writing here the underlying models/methods used. For example, if your NER model model is based on a BERT and a CRF on top, please write it as ",Object(n.jsx)("code",{children:"BERT + CRF"}),". Or if it is an ensemble of LSTMs, write ",Object(n.jsx)("code",{children:"RNN Ensemble"}),", etc."]})}),Object(n.jsx)("li",{children:Object(n.jsxs)("p",{children:[Object(n.jsx)("code",{children:"Task(s)"})," Please write here the task that your model participates in. For example, you would write here ",Object(n.jsx)("code",{children:"NER"})]})}),Object(n.jsx)("li",{children:Object(n.jsxs)("p",{children:[Object(n.jsx)("code",{children:"Dataset(s)"})," Please write here the datasets your model trains/runs on. For example"," ",Object(n.jsx)("code",{children:"RONEC - Romanian Named Entity Corpus v1"}),". Please list here ",Object(n.jsx)("strong",{children:"all"})," the datasets you have run your model on."]})}),Object(n.jsx)("li",{children:Object(n.jsxs)("p",{children:[Object(n.jsx)("code",{children:"External training data"})," Yes/No if your model was trained on external data. Any training data that is ",Object(n.jsx)("em",{children:"not"})," in the dataset you are submitting results to, and you have used to train your model on, will automatically lead to a ",Object(n.jsx)("code",{children:"Yes"})," at this question. ",Object(n.jsx)("em",{children:"Note"}),": pretrained transformers (or any other general, non-task/dataset oriented pretraining) does not count as external training data."]})}),Object(n.jsx)("li",{children:Object(n.jsxs)("p",{children:[Object(n.jsx)("code",{children:"Model size"})," ",Object(n.jsx)("em",{children:"[Optional]"})," Please write here the number of parameters in millions. Eg, if you used a BERT-base and a CRF, you\u2019d probably write ",Object(n.jsx)("code",{children:"110M"}),". It\u2019s very easy to count the number of parameters. Practically, in all current ML plaforms, getting this number is one line of code."]})}),Object(n.jsx)("li",{children:Object(n.jsxs)("p",{children:[Object(n.jsx)("code",{children:"Paper title"})," ",Object(n.jsx)("em",{children:"[Optional]"})," If you have a published paper, list name here."]})}),Object(n.jsx)("li",{children:Object(n.jsxs)("p",{children:[Object(n.jsx)("code",{children:"Paper link"})," ",Object(n.jsx)("em",{children:"[Optional]"})," input URL here; e.g.\xa0link to arxiv.org paper>"]})}),Object(n.jsx)("li",{children:Object(n.jsxs)("p",{children:[Object(n.jsx)("code",{children:"Source code"})," ",Object(n.jsx)("em",{children:"[Optional]"})," input link to Github or other code repository here>"]})}),Object(n.jsx)("li",{children:Object(n.jsxs)("p",{children:[Object(n.jsx)("code",{children:"Results"}),": Please list your model\u2019s metrics/results, one per line, like:"," ",Object(n.jsx)("code",{children:"[Dataset], [Metric], [Value]"}),"."]})})]}),Object(n.jsx)("h2",{id:"example-submission",children:"Example submission:"}),Object(n.jsx)("pre",{children:Object(n.jsxs)("code",{children:["Model name: BERT + CRF",Object(n.jsx)("br",{}),"Task(s): NER",Object(n.jsx)("br",{}),"Dataset(s): RONEC - Romanian Named Entity Corpus v1",Object(n.jsx)("br",{}),"External training data: No",Object(n.jsx)("br",{}),"Model size: 110M",Object(n.jsx)("br",{}),"Paper title: (no paper yet)",Object(n.jsx)("br",{}),"Paper link: -",Object(n.jsx)("br",{}),"Source code: http://github.com/username/my_ner_repo",Object(n.jsx)("br",{}),Object(n.jsx)("br",{}),"Results:",Object(n.jsx)("br",{}),"RONEC - Romanian Named Entity Corpus v1, F1, 91.50",Object(n.jsx)("br",{}),"RONEC - Romanian Named Entity Corpus v1, Precision, 92.00",Object(n.jsx)("br",{}),"RONEC - Romanian Named Entity Corpus v1, Recall, 91.00"]})}),Object(n.jsx)("h2",{id:"other-considerations",children:"Other considerations:"}),Object(n.jsx)("ul",{children:Object(n.jsxs)("li",{children:["If you have sumbitted a model to this leaderboard, ",Object(n.jsx)("strong",{children:"but"})," your paper was not published at the time, reopen the issue an let us know about the paper (title + link). Similarly, reopen your issue regarding source code availability, or any other changes you need to make to your submission."]})}),Object(n.jsx)("hr",{}),Object(n.jsx)(B.a,{variant:"primary",href:"https://github.com/eemlcommunity/ro_benchmark_leaderboard/issues/new/choose",children:"Submit your model"})]})},I=function(e){var t=e.location;return Object(n.jsxs)(d.c,{location:t,children:[Object(n.jsx)(d.a,{exact:!0,path:"/about",component:A}),Object(n.jsx)(d.a,{exact:!0,path:"/submit",component:M}),Object(n.jsx)(d.a,{exact:!0,path:f.taskUrlTemplate,component:y}),Object(n.jsx)(d.a,{exact:!0,path:f.datasetUrlTemplate,component:z}),Object(n.jsx)(d.a,{exact:!0,path:"/terms",component:F}),Object(n.jsx)(d.a,{path:"/",component:x})]})},W=a(35),H=a(22),K=(a(212),a(213),function(){return Object(n.jsxs)(W.a,{collapseOnSelect:!0,expand:"lg",children:[Object(n.jsx)("div",{className:"logo-wrapper",children:Object(n.jsxs)(W.a.Brand,{href:"/ro_benchmark_leaderboard",children:[Object(n.jsx)(k,{}),Object(n.jsxs)("div",{className:"logo-text",children:[" ","LiRo ",Object(n.jsx)("br",{})," BENCHMARK"," "]})]})}),Object(n.jsx)(W.a.Toggle,{"aria-controls":"menu-responsive"}),Object(n.jsx)(W.a.Collapse,{id:"menu-responsive",className:"justify-content-end",children:Object(n.jsxs)(H.a,{children:[Object(n.jsx)(H.a.Link,{href:"/ro_benchmark_leaderboard",children:"Home"}),Object(n.jsx)(H.a.Link,{href:f.submitPageUrl,children:"Submit"}),Object(n.jsx)(H.a.Link,{href:f.aboutPageUrl,children:"About"}),Object(n.jsx)(H.a.Link,{href:f.termsPageUrl,children:"Legal"}),Object(n.jsxs)(H.a.Link,{className:"code-btn",href:"https://github.com/eemlcommunity/ro_benchmark_leaderboard",target:"_blank",rel:"noopener noreferrer",id:"code-btn",children:[Object(n.jsx)(v,{}),Object(n.jsx)("span",{children:"GitHub"})]})]})})]})}),Y=a(23),G=function(e){Object(b.a)(a,e);var t=Object(p.a)(a);function a(e){var n;return Object(h.a)(this,a),(n=t.call(this,e)).urlBuilder=new f,n.urlMap={"/about":"About","/submit":"Submit your model","/terms":"Terms and Conditions"},n}return Object(m.a)(a,[{key:"getTaskName",value:function(e){if(this.urlBuilder.isTaskUrl(e)){var t=this.urlBuilder.getTaskId(e);return O.tasks.find((function(e){return e.id===t})).task_name}if(this.urlBuilder.isDatasetUrl(e)){var a=this.urlBuilder.getDatasetId(e);return E.datasets.find((function(e){return e.id===a})).task}return null}},{key:"getTaskUrl",value:function(e){if(this.urlBuilder.isDatasetUrl(e)){var t=this.urlBuilder.getDatasetId(e),a=E.datasets.find((function(e){return e.id===t})),n=O.tasks.find((function(e){return e.task_name===a.task}));return this.urlBuilder.buildTaskUrl(n)}return null}},{key:"getDatasetName",value:function(e){if(this.urlBuilder.isDatasetUrl(e)){var t=this.urlBuilder.getDatasetId(e),a=E.datasets.find((function(e){return e.id===t}));return a.dataset_name.replace(" - ".concat(a.task),"").trim()}return null}},{key:"isOtherUrl",value:function(e){var t=this.urlBuilder.isHomeUrl(e),a=this.urlBuilder.isTaskUrl(e),n=this.urlBuilder.isDatasetUrl(e);return!(t||a||n)}},{key:"render",value:function(){var e=window.location.pathname;return this.urlBuilder.isHomeUrl(e)?null:Object(n.jsx)(n.Fragment,{children:Object(n.jsxs)(Y.a,{children:[Object(n.jsx)(Y.a.Item,{href:f.basePath,children:"Home"}),this.urlBuilder.isTaskUrl(e)&&Object(n.jsx)(Y.a.Item,{active:!0,children:this.getTaskName(e)}),this.urlBuilder.isDatasetUrl(e)&&Object(n.jsxs)(n.Fragment,{children:[Object(n.jsx)(Y.a.Item,{href:this.getTaskUrl(e),children:this.getTaskName(e)}),Object(n.jsx)(Y.a.Item,{active:!0,children:this.getDatasetName(e)})]}),this.isOtherUrl(e)&&Object(n.jsx)(Y.a.Item,{active:!0,children:this.urlMap[this.urlBuilder.getCanonicalUrl(e)]})]})})}}]),a}(i.a.Component),J=(a(217),function(e){Object(b.a)(a,e);var t=Object(p.a)(a);function a(e){var s;return Object(h.a)(this,a),(s=t.call(this,e)).render=function(){return Object(n.jsx)("footer",{className:"footer",children:Object(n.jsxs)("div",{className:"footer-content",children:[Object(n.jsxs)("div",{className:"footer-message",children:["Contact us at ",Object(n.jsx)("a",{href:"mailto:contact@eeml.eu",children:"contact@eeml.eu"}),". Follow us on"," ",Object(n.jsx)("a",{href:"https://twitter.com/EEMLcommunity",children:"Twitter"}),"."]}),Object(n.jsx)("div",{className:"footer-space",children:" "}),Object(n.jsx)("div",{className:"footer-link",children:Object(n.jsx)("a",{href:f.aboutPageUrl,children:"About"})}),Object(n.jsx)("div",{className:"footer-link",children:Object(n.jsx)("a",{href:f.termsPageUrl,children:"Legal"})})]})})},s.urlBuilder=new f,s}return a}(i.a.Component)),V=(a(218),function(e){var t=e.location;return Object(n.jsxs)("div",{children:[Object(n.jsx)(K,{}),Object(n.jsx)(G,{}),Object(n.jsx)("div",{className:"main-content",children:Object(n.jsx)(I,{location:t})}),Object(n.jsx)(J,{})]})});u.a.load({google:{families:["Roboto:300,400,700","sans-serif"]}}),o.a.render(Object(n.jsx)(c.a,{basename:"/ro_benchmark_leaderboard",children:Object(n.jsx)(d.a,{path:"/",component:V})}),document.getElementById("root"))},77:function(e){e.exports=JSON.parse('{"areas":[{"name":"NLP","tasks":[{"id":"text-classification","name":"Text Classification","summary":{"dataset_count":0,"submission_count":0}},{"id":"ner","name":"NER","summary":{"dataset_count":1,"submission_count":0}},{"id":"machine-translation","name":"Machine Translation","summary":{"dataset_count":0,"submission_count":0}},{"id":"tokenization","name":"Tokenization","summary":{"dataset_count":1,"submission_count":2}},{"id":"sentence-segmentation","name":"Sentence Segmentation","summary":{"dataset_count":1,"submission_count":2}},{"id":"lemmatization","name":"Lemmatization","summary":{"dataset_count":1,"submission_count":2}},{"id":"pos-tagging","name":"POS Tagging","summary":{"dataset_count":1,"submission_count":3}},{"id":"dependency-parsing","name":"Dependency Parsing","summary":{"dataset_count":1,"submission_count":2}},{"id":"language-modeling","name":"Language Modeling","summary":{"dataset_count":0,"submission_count":0}}]}]}')}},[[219,1,2]]]);
//# sourceMappingURL=main.0b0d9f62.chunk.js.map